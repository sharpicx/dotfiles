"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSSModulesCompletionProvider = void 0;
const os_1 = require("os");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const lsp = __importStar(require("vscode-languageserver/node"));
const utils_1 = require("./utils");
const textDocuments_1 = require("./textDocuments");
// check if current character or last character is .
function isTrigger(line, position) {
    const i = position.character - 1;
    return line[i] === '.' || (i > 1 && line[i - 1] === '.');
}
function getWords(line, position) {
    const text = line.slice(0, position.character);
    const index = text.search(/[a-z0-9\._]*$/i);
    if (index === -1) {
        return '';
    }
    return text.slice(index);
}
class CSSModulesCompletionProvider {
    constructor(camelCaseConfig) {
        this.completion = (params) => __awaiter(this, void 0, void 0, function* () {
            const textdocument = textDocuments_1.textDocuments.get(params.textDocument.uri);
            if (textdocument === undefined) {
                return [];
            }
            return this.provideCompletionItems(textdocument, params.position);
        });
        this._classTransformer = (0, utils_1.getTransformer)(camelCaseConfig);
    }
    updateSettings(camelCaseConfig) {
        this._classTransformer = (0, utils_1.getTransformer)(camelCaseConfig);
    }
    provideCompletionItems(textdocument, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContent = textdocument.getText();
            const lines = fileContent.split(os_1.EOL);
            const currentLine = lines[position.line];
            if (typeof currentLine !== 'string')
                return null;
            const currentDir = (0, utils_1.getCurrentDirFromUri)(textdocument.uri);
            if (!isTrigger(currentLine, position)) {
                return [];
            }
            const words = getWords(currentLine, position);
            if (words === '' || words.indexOf('.') === -1) {
                return [];
            }
            const [obj, field] = words.split('.');
            const importPath = (0, utils_1.findImportPath)(fileContent, obj, currentDir);
            if (importPath === '') {
                return [];
            }
            const classNames = yield (0, utils_1.getAllClassNames)(importPath, field, this._classTransformer).catch(() => []);
            const res = classNames.map(_class => {
                const name = this._classTransformer(_class);
                return vscode_languageserver_protocol_1.CompletionItem.create(name);
            });
            return res.map((x, i) => (Object.assign(Object.assign({}, x), { kind: lsp.CompletionItemKind.Text, data: i + 1 })));
        });
    }
}
exports.CSSModulesCompletionProvider = CSSModulesCompletionProvider;
