"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSSModulesDefinitionProvider = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = require("os");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const utils_1 = require("./utils");
const textDocuments_1 = require("./textDocuments");
class CSSModulesDefinitionProvider {
    constructor(camelCaseConfig) {
        this.definition = (params) => __awaiter(this, void 0, void 0, function* () {
            const textdocument = textDocuments_1.textDocuments.get(params.textDocument.uri);
            if (textdocument === undefined) {
                return [];
            }
            return this.provideDefinition(textdocument, params.position);
        });
        this.hover = (params) => __awaiter(this, void 0, void 0, function* () {
            const textdocument = textDocuments_1.textDocuments.get(params.textDocument.uri);
            if (textdocument === undefined) {
                return null;
            }
            return this.provideHover(textdocument, params.position);
        });
        this._camelCaseConfig = camelCaseConfig;
    }
    updateSettings(camelCaseConfig) {
        this._camelCaseConfig = camelCaseConfig;
    }
    provideHover(textdocument, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContent = textdocument.getText();
            const lines = fileContent.split(os_1.EOL);
            const currentLine = lines[position.line];
            if (typeof currentLine !== 'string') {
                return null;
            }
            const currentDir = (0, utils_1.getCurrentDirFromUri)(textdocument.uri);
            const words = (0, utils_1.getWords)(currentLine, position);
            if (words === '' || words.indexOf('.') === -1) {
                return null;
            }
            const [obj, field] = words.split('.');
            const importPath = (0, utils_1.findImportPath)(fileContent, obj, currentDir);
            if (importPath === '') {
                return null;
            }
            const dict = yield (0, utils_1.filePathToClassnameDict)(importPath, (0, utils_1.getTransformer)(this._camelCaseConfig));
            const node = dict[`.${field}`];
            if (!node)
                return null;
            return {
                contents: {
                    language: 'css',
                    value: (0, utils_1.stringiyClassname)(field, node.declarations, node.comments),
                },
            };
        });
    }
    provideDefinition(textdocument, position) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileContent = textdocument.getText();
            const lines = fileContent.split(os_1.EOL);
            const currentLine = lines[position.line];
            if (typeof currentLine !== 'string') {
                return null;
            }
            const currentDir = (0, utils_1.getCurrentDirFromUri)(textdocument.uri);
            const matches = (0, utils_1.genImportRegExp)('(\\S+)').exec(currentLine);
            if (matches &&
                (0, utils_1.isImportLineMatch)(currentLine, matches, position.character)) {
                const filePath = path_1.default.resolve(currentDir, matches[2]);
                const targetRange = vscode_languageserver_protocol_1.Range.create(vscode_languageserver_protocol_1.Position.create(0, 0), vscode_languageserver_protocol_1.Position.create(0, 0));
                return vscode_languageserver_protocol_1.Location.create(filePath, targetRange);
            }
            const words = (0, utils_1.getWords)(currentLine, position);
            if (words === '' || words.indexOf('.') === -1) {
                return null;
            }
            const [obj, field] = words.split('.');
            const importPath = (0, utils_1.findImportPath)(fileContent, obj, currentDir);
            if (importPath === '') {
                return null;
            }
            const targetPosition = yield (0, utils_1.getPosition)(importPath, field, this._camelCaseConfig);
            if (targetPosition === null) {
                return null;
            }
            else {
                const targetRange = {
                    start: targetPosition,
                    end: targetPosition,
                };
                return vscode_languageserver_protocol_1.Location.create(`file://${importPath}`, targetRange);
            }
        });
    }
}
exports.CSSModulesDefinitionProvider = CSSModulesDefinitionProvider;
