"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnection = void 0;
const lsp = __importStar(require("vscode-languageserver/node"));
const CompletionProvider_1 = require("./CompletionProvider");
const DefinitionProvider_1 = require("./DefinitionProvider");
const textDocuments_1 = require("./textDocuments");
function createConnection() {
    const connection = lsp.createConnection(process.stdin, process.stdout);
    textDocuments_1.textDocuments.listen(connection);
    const defaultSettings = {
        camelCase: true,
    };
    const completionProvider = new CompletionProvider_1.CSSModulesCompletionProvider(defaultSettings.camelCase);
    const definitionProvider = new DefinitionProvider_1.CSSModulesDefinitionProvider(defaultSettings.camelCase);
    connection.onInitialize(({ capabilities, initializationOptions }) => {
        if (initializationOptions) {
            if ('camelCase' in initializationOptions) {
                completionProvider.updateSettings(initializationOptions.camelCase);
                definitionProvider.updateSettings(initializationOptions.camelCase);
            }
        }
        const hasWorkspaceFolderCapability = !!(capabilities.workspace && !!capabilities.workspace.workspaceFolders);
        const result = {
            capabilities: {
                textDocumentSync: lsp.TextDocumentSyncKind.Incremental,
                hoverProvider: true,
                definitionProvider: true,
                implementationProvider: true,
                completionProvider: {
                    /**
                     * only invoke completion once `.` is pressed
                     */
                    triggerCharacters: ['.'],
                    resolveProvider: true,
                },
            },
        };
        if (hasWorkspaceFolderCapability) {
            result.capabilities.workspace = {
                workspaceFolders: {
                    supported: true,
                },
            };
        }
        return result;
    });
    connection.onCompletion(completionProvider.completion);
    connection.onDefinition(definitionProvider.definition);
    connection.onImplementation(definitionProvider.definition);
    connection.onHover(definitionProvider.hover);
    return connection;
}
exports.createConnection = createConnection;
